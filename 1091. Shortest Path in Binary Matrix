class Solution {
public:
    int n,m;
    int dr[8]={1,-1,0,0,-1,-1,1,1};
    int dc[8]={0,0,-1,1,-1,1,-1,1};
    typedef  tuple<int,int,int> T;
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        this->n=grid.size();
        this->m=grid[0].size();
        if(grid[n-1][m-1]==1 || grid[0][0]==1)return -1;
        
        priority_queue<T,vector<T>,greater<>>pq;
        pq.push({1,0,0});
        vector<vector<bool>>vis(n,vector<bool>(m,0));
        vector<vector<int>>dis(n,vector<int>(m,300));
        dis[0][0]=1;
        while(pq.size()!=0){
            auto [d,r,c]=pq.top();pq.pop();
            if(r==n-1 && c==m-1)return d;
            if(vis[r][c])continue;
            vis[r][c]=true;
            for(int i=0;i<8;i++){
                int nr=dr[i]+r;
                int nc=dc[i]+c;
                if(nr>=0 && nc>=0 && nr<n && nc<m && grid[nr][nc]==0){
                    
                    if( d+1 < dis[nr][nc]){
                        dis[nr][nc]=d+1;
                       
                        pq.push({dis[nr][nc],nr,nc});
                    }
                    
                }
            }

        }
        return -1;

    }
};
